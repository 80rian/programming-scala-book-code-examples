<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<preface id="Preface">
  <title>Preface</title>

  <para><citetitle>Programming Scala</citetitle> introduces an exciting new
  language that offers all the benefits of a modern object model, functional
  programming, and an advanced type system. Packed with code examples, this
  comprehensive book teaches you how to be productive with Scala quickly, and
  explains what makes this language ideal for today’s scalable, distributed,
  component-based applications that support concurrency and distribution.
  You’ll also learn how Scala takes advantage of the advanced Java Virtual
  Machine as a platform for programming languages.</para>

  <para>Learn more at <ulink
  url="http://programmingscala.com">http://programmingscala.com</ulink> or at
  the book’s <ulink url="http://oreilly.com/catalog/9780596155957/">catalog
  page</ulink>.</para>

  <sect1>
    <title>Welcome to Programming Scala</title>

    <para>Programming languages become popular for many reasons. Sometimes,
    programmers on a given platform prefer a particular language, or one is
    institutionalized by a vendor. Most Mac OS programmers use Objective-C.
    Most Windows programmers use C++ and .NET languages. Most embedded-systems
    developers use C and C++.</para>

    <para>Sometimes, popularity derived from technical merit gives way to
    fashion and fanaticism. C++, Java, and Ruby have been the objects of
    fanatical devotion among programmers.</para>

    <para>Sometimes, a language becomes popular because it fits the needs of
    its era. Java was initially seen as a perfect fit for browser-based, rich
    client applications. Smalltalk captured the essence of object-oriented
    programming (OOP) as that model of programming entered the
    mainstream.</para>

    <para>Today, concurrency, heterogeneity, always-on services, and
    ever-shrinking development schedules are driving interest in functional
    programming (FP). It appears that the dominance of object-oriented
    programming may be over. Mixing paradigms is becoming popular, even
    necessary.</para>

    <para>We gravitated to Scala from other languages because Scala embodies
    many of the optimal qualities we want in a general-purpose programming
    language for the kinds of applications we build today: reliable,
    high-performance, highly concurrent Internet and enterprise
    applications.</para>

    <para>Scala is a multi-paradigm language, supporting both object-oriented
    and functional programming approaches. Scala is scalable, suitable for
    everything from short scripts up to large-scale, component-based
    applications. Scala is sophisticated, incorporating state-of-the-art ideas
    from the halls of computer science departments worldwide. Yet Scala is
    practical. Its creator, Martin Odersky, participated in the development of
    Java for years and understands the needs of professional
    developers.</para>

    <para>Both of us were seduced by Scala, by its concise, elegant, and
    expressive syntax and by the breadth of tools it put at our disposal. In
    this book, we strive to demonstrate why all these qualities make Scala a
    compelling and indispensable programming language.</para>

    <para>If you’re an experienced developer who wants a fast, thorough
    introduction to Scala, this book is for you. You may be evaluating Scala
    as a replacement for or complement to your current languages. Maybe you
    have already decided to use Scala, and you need to learn its features and
    how to use it well. Either way, we hope to illuminate this powerful
    language for you in an accessible way.</para>

    <para>We assume that you are well versed in object-oriented programming,
    but we don’t assume that you have prior exposure to functional
    programming. We assume you are experienced in one or more other
    programming languages. We draw parallels to features in Java, C#, Ruby,
    and other languages. If you know any of these languages, we’ll point out
    similar features in Scala, as well as many features that are new.</para>

    <para>Whether you come from an object-oriented or functional programming
    background, you will see how Scala elegantly combines both paradigms,
    demonstrating their complementary nature. Based on many examples, you will
    understand how and when to apply OOP and FP techniques to many different
    design problems.</para>

    <para>In the end, we hope that you too will be seduced by Scala. Even if
    Scala does not end up becoming your day-to-day language, we hope you will
    gain insights that you can apply regardless of what language you’re
    using.</para>
  </sect1>

  <sect1 id="_conventions_used_in_this_book">
    <title>Conventions Used in This Book</title>

    <para id="para_the_following_typographical_co">The following typographical
    conventions are used in this book:</para>

    <variablelist id="para_book_conventions">
      <varlistentry id="varlistentry-italic">
        <term><emphasis>Italic</emphasis></term>

        <listitem>
          <para>Indicates new terms, URLs, email addresses, file names, and
          file extensions. Many italicized terms are defined in the <xref
          linkend="Glossary" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="varlistentry-constant-width">
        <term><literal>Constant width</literal></term>

        <listitem>
          <para>Used for program listings, as well as within paragraphs to
          refer to program elements such as variable or function names,
          databases, data types, environment variables, statements, and
          keywords.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="varlistentry-constant-width-bold">
        <term><userinput>Constant width bold</userinput></term>

        <listitem>
          <para>Shows commands or other text that should be typed literally by
          the user.</para>
        </listitem>
      </varlistentry>

      <varlistentry id="varlistentry-constant-width-italic">
        <term><replaceable>Constant width italic</replaceable></term>

        <listitem>
          <para>Shows text that should be replaced with user-supplied values
          or by values determined by context.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <tip id="para_tip_this_icon_signifies_a_tip">
      <para>This icon signifies a tip, suggestion, or general note.</para>
    </tip>

    <caution id="para_caution_this_icon_indicates_a">
      <para>This icon indicates a warning or caution.</para>
    </caution>
  </sect1>

  <sect1 id="UsingCodeExamples">
    <title>Using Code Examples</title>

    <para id="para_this_book_is_here_to_help_you_">This book is here to help
    you get your job done. In general, you may use the code in this book in
    your programs and documentation. You do not need to contact us for
    permission unless you’re reproducing a significant portion of the code.
    For example, writing a program that uses several chunks of code from this
    book does not require permission. Selling or distributing a CD-ROM of
    examples from O’Reilly books does require permission. Answering a question
    by citing this book and quoting example code does not require permission.
    Incorporating a significant amount of example code from this book into
    your product’s documentation does require permission.</para>

    <para id="para_we_appreciate_but_do_not_requ">We appreciate, but do not
    require, attribution. An attribution usually includes the title, author,
    publisher, and ISBN. For example: “<emphasis>Programming Scala</emphasis>
    by Dean Wampler and Alex Payne. Copyright 2009 Dean Wampler and Alex
    Payne, 978-0-596-15595-7.”</para>

    <para id="para_if_you_feel_your_use_of_code_e">If you feel your use of
    code examples falls outside fair use or the permission given above, feel
    free to contact us at <email>permissions@oreilly.com</email>.</para>

    <sect2 id="GettingCodeExamples">
      <title>Getting the Code Examples</title>

      <para id="para_you_can_download_the_code_exam">You can download the code
      examples from <ulink
      url="http://examples.oreilly.com/9780596155964/">http://examples.oreilly.com/9780596155964/</ulink>.
      Unzip the files to a convenient location. See the
      <filename>README.txt</filename> file in the distribution for
      instructions on building and using the examples.</para>

      <para id="para_file_name_conventions">Some of the example files can be
      run as scripts using the <literal>scala</literal> command. Others must
      be compiled into class files. Some files contain deliberate errors and
      won’t compile. We have adopted a file naming convention to indicate each
      of these cases, although as you learn Scala it should become obvious
      from the contents of the files, in most cases:<indexterm>
          <primary>code examples in this book</primary>
        </indexterm></para>

      <variablelist id="para_script_file_convention">
        <varlistentry id="varlistentry-script-scala">
          <term><filename>*-script.scala</filename></term>

          <listitem>
            <para>Files that end in <filename>-script.scala</filename> can be
            run on a command line using <literal>scala</literal>, e.g.,
            <literal>scala foo-script.scala</literal>. You can also start
            <literal>scala</literal> in the interpreter mode (when you don’t
            specify a script file) and load any script file in the interpreter
            using the <literal>:load filename</literal> command.</para>
          </listitem>
        </varlistentry>

        <varlistentry id="varlistentry-wont-compile-scala">
          <term><filename>*-wont-compile.scala</filename></term>

          <listitem>
            <para>Files that end in <filename>-wont-compile.scala</filename>
            contain deliberate errors that will cause them to fail to compile.
            We use this naming convention, along with one or more embedded
            comments about the errors, so it will be clear that they are
            invalid. Also, these files are skipped by the build process for
            the examples.</para>
          </listitem>
        </varlistentry>

        <varlistentry id="varlistentry-sake-scala">
          <term><filename>sake.scala</filename></term>

          <listitem>
            <para>Files named <filename>sake.scala</filename> are used by our
            build tool, called <literal>sake</literal>. The
            <filename>README.txt</filename> file describes this tool.</para>
          </listitem>
        </varlistentry>

        <varlistentry id="varlistentry-scala">
          <term><filename>*.scala</filename></term>

          <listitem>
            <para>All other Scala files must be compiled using
            <literal>scalac</literal>. In the distribution, they are used
            either by other compiled or script files, such as tests, not all
            of which are listed in this book.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1>
    <title>Safari® Books Online</title>

    <note role="safarienabled">
      <para>Safari Books Online is an on-demand digital library that lets you
      easily search over 7,500 technology and creative reference books and
      videos to find the answers you need quickly.</para>
    </note>

    <para>With a subscription, you can read any page and watch any video from
    our library online. Read books on your cell phone and mobile devices.
    Access new titles before they are available for print, and get exclusive
    access to manuscripts in development and post feedback for the authors.
    Copy and paste code samples, organize your favorites, download chapters,
    bookmark key sections, create notes, print out pages, and benefit from
    tons of other time-saving features.</para>

    <para>O’Reilly Media has uploaded this book to the Safari Books Online
    service. To have full digital access to this book and others on similar
    topics from O’Reilly and other publishers, sign up for free at <ulink
    role="orm:hideurl:ital"
    url="http://my.safaribooksonline.com/?portal=oreilly">http://my.safaribooksonline.com</ulink>.</para>
  </sect1>

  <sect1 id="_how_to_contact_us">
    <title>How to Contact Us</title>

    <para id="para_please_address_comments_and_qu">Please address comments and
    questions concerning this book to the publisher:</para>

    <simplelist type="vert">
      <member>O’Reilly Media, Inc.</member>

      <member>1005 Gravenstein Highway North</member>

      <member>Sebastopol, CA 95472</member>

      <member>800-998-9938 (in the United States or Canada)</member>

      <member>707-829-0515 (international or local)</member>

      <member>707-829-0104 (fax)</member>
    </simplelist>

    <para id="para_we_have_a_web_page_for_this_bo">We have a web page for this
    book, where we list errata, examples, and any additional information. You
    can access this page at:<indexterm>
        <primary>web page for this book</primary>
      </indexterm></para>

    <simplelist type="vert">
      <member><ulink
      url="http://oreilly.com/catalog/9780596155957/"></ulink></member>
    </simplelist>

    <para id="para_to_comment_or_ask_technical_qu">To comment or ask technical
    questions about this book, send email to:</para>

    <simplelist type="vert">
      <member><email>bookquestions@oreilly.com</email></member>
    </simplelist>

    <para id="para_for_more_information_about_our">For more information about
    our books, conferences, Resource Centers, and the <phrase
    role="keep-together">O’Reilly</phrase> Network, see our website at:</para>

    <simplelist type="vert">
      <member><ulink url="http://oreilly.com"></ulink></member>
    </simplelist>
  </sect1>

  <sect1>
    <title>Acknowledgments</title>

    <para>As we developed this book, many people read early drafts and
    suggested numerous improvements to the text, for which we are eternally
    grateful. We are especially grateful to Steve Jensen, Ramnivas Laddad,
    Marcel Molina, Bill Venners, and Jonas Bonér for their extensive
    feedback.</para>

    <para>Much of the feedback we received came through the Safari Rough Cuts
    releases and the online edition available at <ulink
    url="http://programmingscala.com">http://programmingscala.com</ulink>. We
    are grateful for the feedback provided by (in no particular order) Iulian
    Dragos, Nikolaj Lindberg, Matt Hellige, David Vydra, Ricky Clarkson, Alex
    Cruise, Josh Cronemeyer, Tyler Jennings, Alan Supynuk, Tony Hillerson,
    Roger Vaughn, Arbi Sookazian, Bruce Leidl, Daniel Sobral, Eder Andres
    Avila, Marek Kubica, Henrik Huttunen, Bhaskar Maddala, Ged Byrne, Derek
    Mahar, Geoffrey Wiseman, Peter Rawsthorne, Geoffrey Wiseman, Joe Bowbeer,
    Alexander Battisti, Rob Dickens, Tim MacEachern, Jason Harris, Steven
    Grady, Bob Follek, Ariel Ortiz, Parth Malwankar, Reid Hochstedler, Jason
    Zaugg, Jon Hanson, Mario Gleichmann, David Gates, Zef Hemel, Michael Yee,
    Marius Kreis, Martin Süsskraut, Javier Vegas, Tobias Hauth, Francesco
    Bochicchio, Stephen Duncan Jr., Patrik Dudits, Jan Niehusmann, Bill
    Burdick, David Holbrook, Shalom Deitch, Jesper Nordenberg, Esa Laine, Gleb
    Frank, Simon Andersson, Patrik Dudits, Chris Lewis, Julian Howarth, Dirk
    Kuzemczak, Henri Gerrits, John Heintz, Stuart Roebuck, and Jungho Kim.
    Many other readers for whom we only have usernames also provided feedback.
    We wish to thank Zack, JoshG, ewilligers, abcoates, brad, teto, pjcj,
    mkleint, dandoyon, Arek, rue, acangiano, vkelman, bryanl, Jeff, mbaxter,
    pjb3, kxen, hipertracker, ctran, Ram R., cody, Nolan, Joshua, Ajay, Joe,
    and anonymous contributors. We apologize if we have overlooked
    anyone!</para>

    <para>Our editor, Mike Loukides, knows how to push and prod gentle. He’s
    been a great help throughout this crazy process. Many other people at
    O’Reilly were always there to answer our questions and help us move
    forward.</para>

    <para>We thank Jonas Bonér for writing the <xref linkend="foreword"
    xrefstyle="select:nopage" /> for the book. Jonas is a longtime friend and
    collaborator from the aspect-oriented programming (AOP) community. For
    years, he has done pioneering work in the Java community. Now he is
    applying his energies to promoting Scala and growing that
    community.</para>

    <para>Bill Venners graciously provided the quote on the back cover. The
    first published book on Scala, <citetitle>Programming in Scala</citetitle>
    (Artima), that he cowrote with Martin Odersky and Lex Spoon, is
    indispensable for the Scala developer. Bill has also created the wonderful
    ScalaTest library.</para>

    <para>We have learned a lot from fellow developers around the world.
    Besides Jonas and Bill, Debasish Ghosh, James Iry, Daniel Spiewak, David
    Pollack, Paul Snively, Ola Bini, Daniel Sobral, Josh Suereth, Robey
    Pointer, Nathan Hamblen, Jorge Ortiz, and others have illuminated dark
    corners with their blog entries, forum discussions, and personal
    conversations.</para>

    <para>Dean thanks his colleagues at Object Mentor and several developers
    at client sites for many stimulating discussions on languages, software
    design, and the pragmatic issues facing developers in industry. The
    members of the Chicago Area Scala Enthusiasts (CASE) group have also been
    a source of valuable feedback and inspiration.</para>

    <para>Alex dedicates his portion of the book to his mother, who bestowed
    upon him an appreciation for good writing and the accompanying
    intellectual tools with which to attempt to produce it. Alex thanks his
    lovely partner, Kristen, for her patience and kindness throughout the
    writing process. He would also like to thank his colleagues at Twitter for
    their encouragement and superb work in demonstrating Scala’s
    effectiveness.</para>

    <para>Most of all, we thank Martin Odersky and his team for creating
    Scala.</para>
  </sect1>
</preface>