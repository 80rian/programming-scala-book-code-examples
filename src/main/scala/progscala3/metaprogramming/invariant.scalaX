// src/main/scala/progscala3/metaprogramming/invariant.scala
package metaprogramming
import scala.quoted._


/**
 * Implement an invariant checker, supplied a predicate that must be
 * true before and after the block is evaluated.
 */
object invariant {                                                   // <3>
  case class InvariantFailure(msg: String) extends RuntimeException(msg)

  inline def apply[T](
      inline predicate: => Boolean)(
      inline block: => T): T =
    ${ checkInvariant('predicate, 'block, 'predicate) }

  private def checkInvariant[T](
      predicate1: Expr[Boolean],
      block: Expr[T],
      predicate2: Expr[Boolean])(
      using QuoteContext) = '{  // <5>
    if (!($predicate1)) {
      throw new InvariantFailure(
        "FAILURE! " + ${showExpr(predicate1)} + " == false, " +
        "for statement: " + ${showExpr(block)} + " (before evaluation)")
    }

    '{
      val result = $block                                          // <8>

      if (!($predicate2)) {
        throw new InvariantFailure(
          "FAILURE! " + ${showExpr(predicate1)} + " == false, " +
          "for statement: " + ${showExpr(block)} + " (before evaluation)")
      }

      result
    }
  }

  private def showExpr[T](expr: Expr[T])(using QuoteContext): Expr[String] = {
    val code: String = expr.show
    Expr(code)
  }
}
